knitr::opts_chunk$set(echo = TRUE)
myPaths <- .libPaths("C:/Program Files/R/R-3.6.2/library")
myPaths <- c(myPaths)
.libPaths(myPaths)  # add new path
.libPaths()
file_location <- system.file(
"extdata",
"avian_ecology_bibliography.ris",
package = "revtools")
library(revtools)
x <- read_bibliography(file_location, return_df = FALSE)
file_location <- system.file(
"extdata",
"avian_ecology_bibliography.ris",
package = "revtools")
library(revtools)
x <- read_bibliography(file_location, return_df = FALSE)
str(x)
??revtools
library(DiagrammeR)
myPaths <- .libPaths("C:/Program Files/R/R-3.6.2/library")
myPaths <- c(myPaths)
.libPaths(myPaths)  # add new path
.libPaths()
library(DiagrammeR)
install.packages("downloader")
library(DiagrammeR)
install.packages("influenceR")
library(DiagrammeR)
install.packages("rgexf")
library(DiagrammeR)
install.packages("visNetwork")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10 layout = circo]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
Control; Valley; Rats;
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
sex; age;
# several 'edge' statements
b1->sex; b2->age
Control->b1; Valley->b2; Rats->b3
Control->Valley
Valley->Rats
}
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10 layout = circo]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
Control; Valley; Rats;
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
sex; age;
# several 'edge' statements
b1->sex; b2->age
Control->b1; Valley->b2; Rats->b3
Control->Valley
Valley->Rats
}
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10 layout = circo]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
ScienceResearch; GreyLit; Expert; Knowledge
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
WEbOFScience; Scholar; Scopus
# several 'edge' statements
Knowledge
ConScienceResearch->WEbOFScience
ConScienceResearch->Scholar
ConScienceResearch->Scopus
}
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10 layout = circo]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
ScienceResearch; GreyLit; Expert; Knowledge
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
WEbOFScience; Scholar; Scopus
# several 'edge' statements
Knowledge->Expert->Knowledge
Knowledge->ScienceResearch->Knowledge
Knowledge->GreyLit->Knowledge
ConScienceResearch->WEbOFScience
ConScienceResearch->Scholar
ConScienceResearch->Scopus
}
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10 layout = circo]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
ScienceResearch; GreyLit; Expert; Knowledge
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
WEbOFScience; Scholar; Scopus
# several 'edge' statements
Knowledge->Expert->Knowledge
Knowledge->ScienceResearch->Knowledge
Knowledge->GreyLit->Knowledge
ScienceResearch->WEbOFScience
ScienceResearch->Scholar
ScienceResearch->Scopus
}
")
# several 'edge' statements
Knowledge->Expert->Knowledge
")
library(DiagrammeR)
grViz("
digraph boxes_and_circles {
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10 layout = circo]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
ScienceResearch; GreyLit; Expert; Knowledge
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
WEbOFScience; Scholar; Scopus
# several 'edge' statements
Knowledge->Expert->Knowledge
Knowledge->ScienceResearch->Knowledge
Knowledge->GreyLit->Knowledge
ScienceResearch->WEbOFScience
ScienceResearch->Scholar
ScienceResearch->Scopus
}
")
grViz("
digraph boxes_and_circles {
# a 'graph' statement
graph [overlap = true, fontsize = 10 layout = circo]
# several 'node' statements
node [shape = box,
fontname = Helvetica]
ScienceResearch; GreyLit; Expert; Knowledge
node [shape = circle,
fixedsize = true,
width = 0.9] // sets as circles
WEbOFScience; Scholar; Scopus
# several 'edge' statements
Knowledge->Expert->Knowledge
Knowledge->ScienceResearch
Knowledge->GreyLit->Knowledge
ScienceResearch->WEbOFScience
ScienceResearch->Scholar
ScienceResearch->Scopus
}
")
